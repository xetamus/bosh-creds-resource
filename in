#!/bin/bash
# vim: set ft=sh

set -e

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

TMPDIR=${TMPDIR:-/tmp}

destination=$1

if [ -z "$destination" ]; then
  echo "usage: $0 <path/to/destination>" >&2
  exit 1
fi

payload=$(mktemp "$TMPDIR/bosh-creds.XXXXXX")

cat > "$payload" <&0

pcf_opsman_admin_username=$(jq -r '.source.pcf_opsman_admin_username // ""' < $payload)
pcf_opsman_admin_password=$(jq -r '.source.pcf_opsman_admin_password // ""' < $payload)
pcf_opsman_client_id=$(jq -r '.source.pcf_opsman_client_id // ""' < $payload)
pcf_opsman_client_secret=$(jq -r '.source.pcf_opsman_client_secret // ""' < $payload)
opsman_url=$(jq -r '.source.opsman_url // ""' < $payload)

CURL="om --target https://${opsman_url} -k \
  -c $pcf_opsman_client_id \
  -s $pcf_opsman_client_secret \
  --username $pcf_opsman_admin_username \
  --password $pcf_opsman_admin_password \
  curl"

# Get user, pass and CA cert
CA_CERT=$($CURL --path=/api/v0/security/root_ca_certificate | jq -r .root_ca_certificate_pem)
echo "$CA_CERT" > "$destination/bosh-ca.pem"

$CURL --path=/api/v0/deployed/director/credentials/director_credentials > creds.json

jq -r .credential.value.identity < creds.json > "$destination/bosh-username"
jq -r .credential.value.password < creds.json > "$destination/bosh-pass"

BOSH_DEPLOYMENT=$(jq -r '.params.deployment // ""' < $payload)
echo "$BOSH_DEPLOYMENT" > "$destination/bosh-deployment"

# Get Director ip
director_id=$($CURL --path=/api/v0/deployed/products | jq -r ".[].guid" | grep p-bosh)

$CURL --path="/api/v0/deployed/products/$director_id/static_ips" | jq -r .[0].ips[0] > "$destination/director_ip"

# In PCF 1.12 there is a new endpoint with credentials to use with BOSH CLIv2
set +e
$CURL --path=/api/v0/deployed/director/credentials/bosh2_commandline_credentials > "$destination/bosh2_commandline_credentials.tmp"
# shellcheck disable=SC2181
if [[ "$?" = "0" ]]; then
  jq -r .credential < "$destination/bosh2_commandline_credentials.tmp" | awk '{printf "export %s\nexport %s\nexport %s\n", $1, $2, $4}' > "$destination/bosh2_commandline_credentials"
  {
    echo "export BOSH_CA_CERT=$'"
    cat "$destination/bosh-ca.pem"
    echo "'"
  } >> "$destination/bosh2_commandline_credentials"

  # shellcheck disable=1090
  source "$destination/bosh2_commandline_credentials"
  
  CA_CERT=$($CURL --path=/api/v0/security/root_ca_certificate | jq .root_ca_certificate_pem)
  # [BOSH Deployment Resource](https://github.com/cloudfoundry/bosh-deployment-resource) supports dynamic configuration through a JSON file
  # Let's create such a file so that the resource can be used for deployment
  echo "{ \"target\": \"$BOSH_ENVIRONMENT\", \"client\": \"$BOSH_CLIENT\", \"client_secret\": \"$BOSH_CLIENT_SECRET\", \"ca_cert\": $CA_CERT, \"deployment\": \"$BOSH_DEPLOYMENT\" }" > "$destination/opsman_bosh.json"
fi
set -e

external_bosh_address=$(jq -r '.source.external_bosh_address // ""' < $payload)
if [[ ${external_bosh_address} ]]; then
  external_bosh_client=$(jq -r '.source.external_bosh_client // ""' < $payload)
  external_bosh_client_secret=$(jq -r '.source.external_bosh_client_secret // ""' < $payload)
  external_bosh_ca_cert=$(jq '.source.external_bosh_ca_cert // ""' < $payload)

  echo "{ \"target\": \"${external_bosh_address}\", \"client\": \"${external_bosh_client}\", \"client_secret\": \"${external_bosh_client_secret}\", \"ca_cert\": ${external_bosh_ca_cert}, \"deployment\": \"$BOSH_DEPLOYMENT\" }" > "$destination/external_bosh.json"
fi

# Create a YAML file that can be used as BOSH var file (also by bosh-deployment resource)
echo "bosh_url: " $(cat "$destination/director_ip") > "$destination/pcf_bosh_director.yml"
echo "bosh_ca_cert: |" >> "$destination/pcf_bosh_director.yml"
sed 's/^/  /g' < "$destination/bosh-ca.pem" >> "$destination/pcf_bosh_director.yml"

rm -f "$destination/bosh2_commandline_credentials.tmp"

echo '{"version": {"ref": "123"}}' >&3
